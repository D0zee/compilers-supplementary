-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac;
    [args, locs]
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)

  fun evalOp(op, x1, x2){
    case op of 
        "+"  -> x1 + x2
      | "-"  -> x1 - x2
      | "*"  -> x1 * x2
      | "/"  -> x1 / x2
      | "%"  -> x1 % x2
      | ">"  -> x1 > x2
      | ">=" -> x1 >= x2
      | "<"  -> x1 < x2
      | "<=" -> x1 <= x2
      | "==" -> x1 == x2
      | "!=" -> x1 != x2
      | "&&" -> x1 && x2
      | "!!" -> x1 !! x2
    esac
  }
  
  fun evalBegin(c@[stack, cst, state, world], name, nArgs, nLoc) {
    fun addArgs(state, args, nArgs) {
      fun enumerate(idx, list) {
        case list of 
            {}        -> {}
          | list -> [idx, hd(list)]:enumerate(idx + 1, tl(list))
        esac
      }

      foldr(fun(st, arg@[i, value]) {assign(st, Arg(i), value); st}, state, enumerate(0, args.reverse))
    }
    -- printf("%s aboba\n");
    case take(stack, nArgs) of
      [stack, args] -> 
            state := makeState(nArgs, nLoc);
            [stack, cst, addArgs(state, args, nArgs), world]
    esac
  }

  fun eval (c@[stack, cst, state, world], insns) {
    -- printf("[eval()] st: %s, zstate: %s, %s\n", string(stack), string(state), string(insns));
    case insns of
      ins : other -> 
        case ins of
          READ -> case readWorld(world) of
                    [z, newWorld] -> eval([z:stack, cst, state, newWorld], other)
                  esac
        | WRITE -> eval([tl(stack), cst, state, writeWorld(hd(stack), world)], other)
        | BINOP(op) -> case stack of
                        (ex2:ex1:s) -> eval([evalOp(op, ex1, ex2):s, cst, state, world], other)
                      esac

        | LD    (loc)  -> eval([lookup(state, loc) : stack, cst, state, world], other)
        | LDA (x) -> eval([Ref(x) : stack, cst, state, world], other)
        | ST    (loc)  -> eval([stack, cst, assign(state, loc, hd(stack)), world], other)
        | STI -> case stack of 
                  (value : Ref(loc) : tail) -> eval([value : tail, cst, assign(state, loc, value), world], other)
                esac
        
        | CONST (n) -> eval([n:stack, cst, state, world], other)
        | LABEL (_)    -> eval(c, other)
        | JMP   (l)    -> eval(c, fromLabel(env, l))
        | CJMP  (cond, l) -> 
            case [cond, hd(stack)] of
              ["nz", 0] ->  eval([tl (stack), cst, state, world], other)
              | ["z", 0] -> eval([tl(stack), cst, state, world], fromLabel(env, l))
              | ["nz", _] -> eval([tl(stack), cst, state, world], fromLabel(env, l))
              | ["z", _] -> eval([tl (stack), cst, state, world], other)
              | _ -> failure("such Cjmp is not implemented")
            esac
        | DROP -> eval([tl(stack), cst, state, world], other)
        | GLOBAL (x) -> eval([stack, cst, assign(state, Glb(x), 0), world], other)
        | BEGIN  (name, nArgs, nLoc) -> eval(evalBegin(c, name, nArgs, nLoc), other)
        | END -> 
            case cst of
              [state, other]:cst -> eval([stack, cst, state, world], other)
              | {} -> c
            esac  
        | CALL(funLab, _) -> eval([stack, [state, other]:cst, state, world], fromLabel(env, funLab))
        | _ -> failure("eval is not implemented")
        esac
      | _ -> c
      esac
  }

  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }


  fun compileWrite(lab, env, Write (x)){
    case genLabel(env) of
      [lab1, env] ->
          case compile(lab1, env, x) of
            [lab1Used, env, code] -> [false, env, code <+> label(lab1, lab1Used) <+ WRITE]
          esac
    esac
  }

  fun compileAssn(lab, env, Assn(lv, rv)){
    case lv of
    Ref(x) -> 
      case genLabel(env) of
        [lab1, env] -> 
          case compile(lab1, env, rv) of
            [lab1Used, env, code1] ->
                  [false, env, code1 <+> label(lab1, lab1Used) <+ ST(lookupVar(env, x))]
          esac
      esac
    | lv -> 
      case genLabels(env, 2) of
        [lab1, lab2, env] -> 
          case compile(lab1, env, lv) of
            [lab1Used, env, code1] ->
              case compile(lab2, env, rv) of
                [_, env, code2] ->
                  [false, env, code1 <+> label(lab1, lab1Used) <+> code2 <+ STI]
              esac
          esac
      esac
    esac
  }

  fun compileSeq(lab, env, Seq (s1, s2)){
    case env.genLabel of
      [s2Lab, env] ->
          case compile (s2Lab, env, s1) of
            [s2LabUsed, env, s1Code] ->
              case compile (lab, env, s2) of
                [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
              esac
          esac
    esac
  }

  fun compileBinop(lab, env, Binop(op, s1, s2)){
    case env.genLabels(2) of
          [s1Lab, s2Lab, env] ->
            case compile (s1Lab, env, s1) of
              [s1LabUsed, env, s1Code] ->
                  case compile (s2Lab, env, s2) of
                    [s2LabUsed, env, s2Code] -> [false, env, 
                          s1Code <+> 
                          label(s1Lab, s1LabUsed) <+> 
                          s2Code <+> 
                          label(s2Lab, s2LabUsed) <+ 
                          BINOP(op)]
                  esac
            esac
    esac
  }

  fun compileWhile(lab, env, While(c, b)){
    case env.genLabels(3) of
      [lab1, lab2, lab3, env] -> 
        case compile(lab1, env, b) of
          [_, env, body] ->
            case compile(lab3, env, c) of
              [_, env, cond] -> [false, env, 
                  singletonBuffer(JMP (lab1)) <+ 
                  LABEL(lab2) <+> 
                  body <+ LABEL(lab1) <+> cond <+ 
                  CJMP("nz", lab2)]
            esac
        esac
    esac
  }

  fun compileIf(lab, env, If(e, stmt1, stmt2)){
    case env.genLabel of
      [lab1, env] -> case compile(lab, env, stmt1) of
          [_, env, code1] -> case compile(lab, env, stmt2) of
              [_, env, code2] ->
                case compile(lab, env, e) of
                  [_, env, ee] -> [true, env, ee <+ CJMP("z", lab1) <+> code1 <+ JMP (lab) <+ LABEL(lab1) <+> code2]
                esac
            esac
        esac
    esac
  }

  fun compileIgnore(lab, env, Ignore(e)){
    case env.genLabel of 
      [lab1, env] -> 
        case compile(lab1, env, e) of
          [used, env, code] -> [false, env, code <+> label(lab1, used) <+ DROP]
        esac
    esac
  }

  fun compileScope(lab, env, Scope(defs, stmt)){
    
    fun addGlobals(env, names){
      if env.isGlobal then foldl(fun (code, name) {code <+ GLOBAL (name)}, emptyBuffer(), names)
      else emptyBuffer()
      fi
    }

    fun handleFun(env, Fun(name, args, body)){
      case genFunLabel(env, name) of
        [funLab, env] -> env.addFun(name, funLab, size(args))
      esac
    }

    fun rememberDefs(env, defs){
      foldl(
        fun(env, def){
          case def of 
            Var(_) -> env
          | Fun (name, args, body) -> 
                case lookupFun(env, name) of 
                  Fun(funLab, _) -> rememberFun(env, funLab, args, body)
                esac
          esac
        },
        env, defs
      )
    }

    fun handleDefs(env, defs) {
      case foldl (fun([env, code], def) {
        case def of 
            Var(names)                     -> [addVars(env, names), code <+> addGlobals(env, names)]
          | f@Fun(name, args, body) -> [handleFun(env, f), code]
        esac
      } , [env, emptyBuffer()], defs) of 
      
      [env, code] -> [rememberDefs(env, defs), code]
      esac
    }
    case handleDefs(env.beginScope, defs) of
      [env, defsCode] ->  
        case compile(lab, env, stmt) of
          [labUsed, env, code] -> [labUsed, env.endScope, defsCode <+> code]
        esac
    esac
  }

  fun compileCall(lab, env, Call (fName, args)){
    case env.genLabel of
      [argLab, env] ->
        case compileArgs(argLab, env, args) of
          [argLabUsed, env, argsCode] -> 
              [false, env, 
                argsCode <+>
                label(argLab, argLabUsed) <+
                case lookupFun(env, fName) of 
                  Fun (funLab, nArgs) -> CALL(funLab, nArgs) 
                esac
              ]
        esac
    esac
  }

  fun compile (lab, env, stmt) {
    -- printf("%s\n", string(stmt));
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (lookupVar(env, x)) <+ DROP]
    | Write (x)      -> compileWrite(lab, env, stmt)
    | Assn(_, _) -> compileAssn(lab, env, stmt)
    | Seq   (s1, s2) -> compileSeq(lab, env, stmt)

    | Binop (op, s1, s2) -> compileBinop(lab, env, stmt)
    | While (_, _) -> compileWhile(lab, env, stmt)
    | If (e, stmt1, stmt2) -> compileIf(lab, env, stmt)
    | DoWhile(e, s) -> compile(lab, env, Seq(s, While(e, s)))
    | Ignore (e) -> compileIgnore(lab, env, stmt)
    | Scope(defs, expr) -> compileScope(lab, env, stmt) 
    | Call (fName, args) -> compileCall(lab, env, stmt)
    | _ -> failure("compileSM is not implemented\n")
    esac
  }

  fun compileArgs(lab, env, args) {
    case args of 
      arg : args -> 
            case compileArgs(lab, env, args) of
              [_, env, restCode] -> 
                case compile(lab, env, arg) of 
                  [used, env, code] -> [used, env, restCode <+> code]
                esac
            esac
      | {} -> [false, env, emptyBuffer()]
    esac
  }

  fun compileFun (env, name, args, body, state) {
    case env.genLabel of
      [endLab, env] -> 
        case compile(endLab, addArgs(beginFun(env, state), args), body) of
          [endLabUsed, env, code] -> [env,
            singletonBuffer(LABEL(name)) 
            <+ BEGIN(name, size(args), getLocals(env))
            <+> code
            <+> label(endLab, endLabUsed)
            <+ END]
        esac
    esac
  }

  fun compileFuns([funs, env]) {
    case funs of 
        {} -> emptyBuffer()
      | Fun(name, args, body, state) : funs -> 
        case compileFun(env, name, args, body, state) of
          [env, code] -> code <+> compileFuns([funs, env])
        esac
      esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, env, code] -> getBuffer $ (
              singletonBuffer(LABEL("main")) 
              <+ BEGIN ("main", 0, getLocals(env))
              <+> code 
              <+> label (endLab, endLabUsed)
              <+ END <+> compileFuns(getFuns(env))
            )
       esac
  esac
}


