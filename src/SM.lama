-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun readImpl([stack, state, world]){
  case readWorld(world) of
    [z, newWorld] -> [z:stack, state, newWorld]
  esac
}



-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c@[stack, state, world], insns) {
  fun evalOp(op, x1, x2){
    case op of 
        "+"  -> x1 + x2
      | "-"  -> x1 - x2
      | "*"  -> x1 * x2
      | "/"  -> x1 / x2
      | "%"  -> x1 % x2
      | ">"  -> x1 > x2
      | ">=" -> x1 >= x2
      | "<"  -> x1 < x2
      | "<=" -> x1 <= x2
      | "==" -> x1 == x2
      | "!=" -> x1 != x2
      | "&&" -> x1 && x2
      | "!!" -> x1 !! x2
    esac
  }

  case insns of
    {} -> c
  | ins : other -> eval(
    case ins of
      READ -> readImpl(c)
    | WRITE -> case c of 
                [z:s, state, world] -> [s, state, writeWorld(z, world)]
               esac
    | BINOP(op) -> case c of
                    [ex2:ex1:s, state, world] -> [evalOp(op, ex1, ex2):s, state, world]
                   esac
    | LD (name) -> ([state(name):stack, state, world])
    | ST (name) -> case c of 
                  [value:s, state, world] -> [s, state <- [name, value], world]
                 esac
    | CONST (n) -> [n:stack, state, world]
    esac
  , other)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var (s) -> { LD(s) }
  | Const(x) -> { CONST(x) }
  | Binop(op, ex1, ex2) -> compileExpr(ex1) +++ compileExpr(ex2) +++ {BINOP(op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of
    Assn (v, expr) -> compileExpr(expr) +++ {ST(v)}
  | Seq (st1, st2) -> compileSM(st1) +++ compileSM(st2)
  | Skip -> {}
  | Read (v) -> {READ, ST(v)}
  | Write (expr) -> compileExpr(expr) +++ {WRITE}
  esac
}
