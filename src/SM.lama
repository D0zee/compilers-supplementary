-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

fun evalOp(op, x1, x2){
    case op of 
        "+"  -> x1 + x2
      | "-"  -> x1 - x2
      | "*"  -> x1 * x2
      | "/"  -> x1 / x2
      | "%"  -> x1 % x2
      | ">"  -> x1 > x2
      | ">=" -> x1 >= x2
      | "<"  -> x1 < x2
      | "<=" -> x1 <= x2
      | "==" -> x1 == x2
      | "!=" -> x1 != x2
      | "&&" -> x1 && x2
      | "!!" -> x1 !! x2
    esac
  }

-- fun eval (env, c@[stack, state, world@[input, output]], insns) {
--   -- failure("not implemented " ++ showSM(insns))
--   case insns of 
--     { } -> c
--   | insn : rest -> 
--     case insn of 
--       ST (x) -> case stack of (z : s) -> eval(env, [stack, state <- [x, z], world], rest) esac 
--     | LD (x) -> eval(env, [state(x) : stack, state, world], rest)
--     | CONST (x) -> eval(env, [x : stack, state, world], rest)
--     | BINOP (op) -> case stack of (y : (x : s)) -> eval(env, [evalOp(op, x, y) : s, state, world], rest) esac
--     | READ -> case readWorld(world) of [res, newWorld] -> eval(env, [res : stack, state, newWorld], rest) esac
--     | WRITE -> case stack of (z : s) -> eval(env, [s, state, writeWorld(z, world)], rest) esac
--     | JMP (l) -> eval(env, c, env.fromLabel(l))
--     | LABEL (l) -> eval(env, c, rest)
--     | CJMP("Z", l) -> 
--       case stack of 
--         h : stack -> eval(env, [stack, state, world], if h == 0 then env.fromLabel(l) else rest fi)
--       esac
--     | CJMP("NZ", l) -> 
--       case stack of 
--         h : stack -> eval(env, [stack, state, world], if h != 0 then env.fromLabel(l) else rest fi)
--       esac
--     | STI -> 
--       case stack of 
--         (y : x : stack) -> eval(env, [y : stack, state <- [x, y], world], rest)
--       esac
--     | LDA (x) -> 
--       eval(env, [x : stack, state, world], rest)
--     | DROP -> 
--       eval(env, [tl(stack), state, world], rest)
--     esac
--   esac
-- }

-- fun evalSingleIns (env, c@[stack, state, world], ins){
--   printf("%s %s\n", string(ins), string(stack));case ins of
--       READ -> case readWorld(world) of
--                 [z, newWorld] -> [z:stack, state, newWorld]
--               esac
--     | WRITE -> [tl(stack), state, writeWorld(hd(stack), world)]
--     | BINOP(op) -> case stack of
--                     (ex2:ex1:s) -> [evalOp(op, ex1, ex2):s, state, world]
--                    esac
--     | LD    (x)  -> [state(x) : stack, state, world]

--     | ST    (x)  -> [stack, state <- [x, hd(stack)], world]
--     | CONST (n) -> [n:stack, state, world]
--     | LABEL (s)    -> c
--     | JMP   (l)    -> [c, fromLabel(env, l)]
--     | CJMP  (cond, l) -> 
--         case [cond, hd(stack)] of
--           ["nz", 0] ->  c
--           | ["z", 0] -> [[tl(stack), state, world], fromLabel(env, l)]
--           | ["nz", _] -> [[tl(stack), state, world], fromLabel(env, l)]
--           | ["z", _] -> c
--           | _ -> failure("such Cjmp is not implemented")
--         esac

--     esac
-- }
fun evalSingleIns (env, c@[stack, state, world], ins){
  case ins of
      READ -> case readWorld(world) of
                [z, newWorld] -> [z:stack, state, newWorld]
              esac
    | WRITE -> [tl(stack), state, writeWorld(hd(stack), world)]
    | BINOP(op) -> case stack of
                    (ex2:ex1:s) -> [evalOp(op, ex1, ex2):s, state, world]
                   esac
    | LD    (x)  -> [state(x) : stack, state, world]

    | ST    (x)  -> [stack, state <- [x, hd(stack)], world]
    | CONST (n) -> [n:stack, state, world]
    | LABEL (s)    -> c
    | JMP   (l)    -> [c, fromLabel(env, l)]
    | CJMP  (cond, l) -> 
        case [cond, hd(stack)] of
          ["nz", 0] ->  c
          | ["z", 0] -> [[tl(stack), state, world], fromLabel(env, l)]
          | ["nz", _] -> [[tl(stack), state, world], fromLabel(env, l)]
          | ["z", _] -> c
          | _ -> failure("such Cjmp is not implemented")
        esac
    | DROP -> [tl(stack), state, world]
    | STI -> case stack of 
              (x : y : tail) -> [x : tail, state <- [y, x], world] 
             esac
    | LDA (x) -> [x : stack, state, world]
    -- | _ -> failure("eval is not implemented")
    esac
}


-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, c@[stack, state, world], insns) {
  case insns of
    {} -> c
  | ins : other -> 
    case evalSingleIns(env, c, ins) of
      [c1, insTail] -> eval(env, c1, insTail)
      | c1 -> eval(env, c1, other)
    esac
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    -- printf("%s", string(stmt));
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x) <+ DROP]
    | Write (x)      -> 
              case genLabel(env) of
                [lab1, env] ->
                    case compile(lab1, env, x) of
                      [lab1Used, env, code] -> [false, env, code <+> label(lab1, lab1Used) <+ WRITE]
                    esac
              esac
    -- [false, env, singletonBuffercompile (e) <+ WRITE]
    | Assn  (x, v)   -> 
      case genLabels(env, 2) of
        [lab1, lab2, env] -> 
          case compile(lab1, env, x) of
            [lab1Used, env, code1] ->
              case compile(lab2, env, v) of
                [lab2Used, env, code2] ->
                  [false, env, code1 <+> code2 <+ STI]
              esac
          esac
      esac
    | Seq   (s1, s2) ->
        case env.genLabel of
          [s2Lab, env] ->
             case compile (s2Lab, env, s1) of
               [s2LabUsed, env, s1Code] ->
                  case compile (lab, env, s2) of
                    [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                  esac
             esac
        esac
    | Binop (op, s1, s2) -> 
         case env.genLabels(2) of
          [s1Lab, s2Lab, env] ->
             case compile (s1Lab, env, s1) of
               [s1LabUsed, env, s1Code] ->
                  case compile (s2Lab, env, s2) of
                    [s2LabUsed, env, s2Code] -> [false, env, s1Code <+> label(s1Lab, s1LabUsed) <+> s2Code <+>label(s2Lab, s2LabUsed) <+ BINOP(op)] -- maybe replace it on seq????
                  esac
             esac
        esac
    -- | While (e, s) -> 
    --     case env.genLabels(2) of
    --       [lab1, lab2, env] -> 
    --         case compile(lab1, env, s) of
    --          [_, env, code] ->
    --           [false, env, singletonBuffer(JMP (lab1)) <+ LABEL(lab2) <+> code <+ LABEL(lab1) <+> compileExpr(e) <+ CJMP("nz", lab2)]
    --         esac
    --     esac
    -- | If (e, stmt1, stmt2) -> 
    --     case env.genLabel of
    --       [lab1, env] -> case compile(lab, env, stmt1) of
    --           [_, env, code1] -> case compile(lab, env, stmt2) of
    --               [_, env, code2] ->
    --                [true, env, compileExpr(e) <+ CJMP("z", lab1) <+> code1 <+ JMP (lab) <+ LABEL(lab1) <+> code2]
    --             esac
    --         esac
    --     esac
    -- | DoWhile(s, e) -> compile(lab, env, Seq(s, While(e, s)))
    | Ignore (e) -> 
      case env.genLabel of 
        [lab1, env] -> 
          case compile(lab1, env, e) of
            [used, env, code] -> [false, env, code <+> label(lab1, used) <+ DROP]
          esac
      esac
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
