-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addDefs (st, defs) {
  foldl(
    fun(s, def) {
      case def of 
        Var(names) -> addNames(s, names)
      | Fun(name, arg, body) -> addFunction(s, name, arg, body)
      esac    
    },
    st,defs
    )
}

fun addValuesToNames (st, names, vals) {
  foldl(fun(s, [name, v]) {s.addName(name, v)}, st, zip(names, vals))
}

fun eval (c@[s, w], expr) {
  -- failure ("evalExpr not implemented\n")
  -- printf("%s\n", string(expr));
  case expr of 
   Assn    (x, v) ->  case evalList(c, {x, v}) of
                        [[s, w], {x_res, v_res}] -> 
                          case x_res of
                            Ref(x_res) -> [[s <- [x_res, v_res], w], v_res]
                            | ElemRef(arr, idx) -> [c, arr[idx] := v_res]
                          esac
                        -- [[s, w], {Ref(x_res), v_res}] -> [[s <- [x_res, v_res], w], v_res]
                      esac
  | Seq     (e1, e2) -> case evalList(c, {e1, e2}) of
                          [c, {e1_res, e2_res}] -> [c, e2_res]
                        esac
  | Skip -> [c, expr]
  -- | Read    (x) -> case readWorld(w) of
  --                   [v, new_w] -> [[s <- [x, v], new_w], expr]
  --                  esac
  -- | Write   (e) ->  case eval(c, e) of
  --                     [[s, w], v] -> [[s, writeWorld(v, w)], expr]
  --                   esac
  | If      (cond, happy, sad) -> case eval(c, cond) of
                                    [c, cond_res] -> 
                                          if cond_res then eval(c, happy) else eval(c, sad) fi
                                  esac
  | While   (cond, body) -> eval(c, If(cond, Seq(body, While(cond, body)), Skip))
  | DoWhile (cond, body) -> case eval(c, body) of
                              [c, _] -> eval(c, While(cond, body))
                            esac

  | Var     (x) -> [c, lookup(s, x)]
  | Ref     (x) -> [c, Ref(x)]
  | Const   (x) -> [c, x]
  | Binop   (op, e1, e2) -> case evalList(c, {e1, e2}) of
                              [c, {e1_res, e2_res}] -> [c, evalOp(op, e1_res, e2_res)]
                            esac
  | Ignore  (e) -> case eval(c, e) of
                    [c, _] -> [c, expr]
                   esac
  | Call    (f, arg) -> 
        case evalList(c, arg) of 
            [[st, w], values] -> 
            case lookup(st, f) of
                Fun(names, body) -> case body of
                  External -> case evalBuiltin(f, values, w) of [res, w] -> [[s, w], res] esac
                  | _ -> case addValuesToNames(st.enterFunction, names, values) of
                    funSt -> 
                      case eval([funSt, w], body) of
                        [[funSt, w], res] -> [[st.leaveFunction(getGlobal(funSt)), w], res] 
                      esac
                  esac
                  esac
            esac
    esac
  | Scope   (defs, body) -> 
      case eval([addDefs(s.enterScope, defs), w], body) of
        [[s, w], x] -> [[s.leaveScope, w], x]
      esac
  | Set (x, expr) -> case eval(c, expr) of
      [c@[s, w], res] -> [[s <- [x, res], w], Void]
    esac
  | String  (expr) -> [c, expr]
  | Array (vals) ->  case evalList(c, vals) of
      [c, res] -> [c, listArray(res)]
    esac
  | Sexp  (s, vals) -> case evalList(c, vals) of
      [c, res] -> [c, Sexp(s, listArray(res))]
    esac
  | Elem (e1, e2) -> case evalList(c, {e1, e2}) of
    [c, {arr, idx}] -> 
      case arr of
        Sexp(_, arr) -> [c, arr[idx]]
        | _ -> [c, arr[idx]]
      esac
  esac
  | ElemRef (e1, e2) -> case evalList(c, {e1, e2}) of
    [c, {arr, idx}] -> 
      case arr of
        Sexp(_, arr) -> [c, ElemRef(arr, idx)]
        | _ -> [c, ElemRef(arr, idx)]
      esac
  esac
  | _ -> failure(sprintf("not implemented %s\n", string(expr)))
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
