-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun evalExpr (st, expr) {
  fun evalOp(op, x1, x2){
    case op of 
        "+"  -> x1 + x2
      | "-"  -> x1 - x2
      | "*"  -> x1 * x2
      | "/"  -> x1 / x2
      | "%"  -> x1 % x2
      | ">"  -> x1 > x2
      | ">=" -> x1 >= x2
      | "<"  -> x1 < x2
      | "<=" -> x1 <= x2
      | "==" -> x1 == x2
      | "!=" -> x1 != x2
      | "&&" -> x1 && x2
      | "!!" -> x1 !! x2
    esac
  }
  case expr of
    Var (x) -> st(x)
  | Const (x) -> x
  | Binop (op, ex1, ex2) -> evalOp(op, evalExpr(st, ex1), evalExpr(st, ex2))
  esac
}