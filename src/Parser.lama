-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr (
          {
			[Left , {[s ("!!"), fun (l, op , r) { Binop (op, l, r)} ],
					 [s ("&&"), fun (l, op , r) { Binop (op, l, r)} ]}],
            [Nona , {[s ("=="), fun (l, op , r) { Binop (op, l, r)} ], 
                     [s ("!="), fun (l, op , r) { Binop (op, l, r)} ],
                     [s (">"), fun (l, op , r) { Binop (op, l, r)} ],
                     [s ("<"), fun (l, op , r) { Binop (op, l, r)} ],
                     [s (">="), fun (l, op , r) { Binop (op, l, r)} ], 
                     [s ("<="), fun (l, op , r) { Binop (op, l, r)} ]}],
			[Left , {[s ("+"), fun (l, op , r) { Binop (op, l, r)} ],
                     [s ("-"), fun (l, op , r) { Binop (op, l, r)} ]}],
			[Left , {[s ("*"), fun (l, op , r) { Binop (op, l, r)} ],
                     [s ("/"), fun (l, op , r) { Binop (op, l, r)} ],
                     [s ("%"), fun (l, op , r) { Binop (op, l, r)} ]}]
          }
          , primary
        );
      -- exp = primary;

var ifStmt = memo $ eta syntax (
    e=exp kThen st1=stmt {If (e, st1, Skip)}|
    e=exp kThen st1=stmt kElse st2=stmt {If (e, st1, st2)}|
    e=exp kThen st1=stmt kElif st2=ifStmt {If (e, st1, st2)}
);

var simpleStmt = memo $ eta syntax (
    kRead x=inbr[s("("), lident, s(")")] { Read (x) } |
    kSkip { Skip } |
    x=lident s[":="] e=exp { Assn (x, e) } |
    kWrite e=inbr[s("("), exp, s(")")] { Write (e) } |
    kWhile e=exp kDo st=stmt kOd {While (e, st)} |
    kIf i=ifStmt kFi {i} |
    kDo st=stmt kWhile e=exp kOd {Seq(st, While(e, st))}
  );

var stmt = memo $ eta syntax ( simpleStmt | s1=simpleStmt s[";"] s2=stmt { Seq(s1,s2) } );
 
-- if e then s1 else s2 fi
-- if e then s1 fi
-- if e then s1 else [if e2 then]
-- if e elif e1 then

-- Public top-level parser
public parse = stmt;