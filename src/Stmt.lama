-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[state, world], stmt) {
  case stmt of
    Assn (v, ex) -> [state <- [v, evalExpr(state, ex)], world]
  | Seq (st1, st2) -> eval(eval(c, st1), st2)
  | Skip -> c
  | Read (v) -> case readWorld(world) of
                  [vl, wd] -> [state <- [v, vl], wd]
                esac
  | Write (expr) -> [state, writeWorld(evalExpr(state, expr), world)]
  | While (expr, stmt) -> eval (c, If(expr, Seq(stmt, While(expr, stmt)), Skip))
  | DoWhile (stmt, expr) -> eval(eval(c, stmt), While(expr, stmt))
  | If (expr, stmt1, stmt2) -> if evalExpr(state, expr) then eval(c, stmt1) else eval(c, stmt2) fi
  | _ -> failure("eval")
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
