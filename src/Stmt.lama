-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn   (string, expr)     |
--        Seq    (stmt, stmt)       |
--        Skip                      |
--        Read   (string)           |
--        Write  (expr)             |

fun eval (c, stmt) {
  case stmt of
    Assn (v, ex) -> [c.fst <- [v, evalExpr(c.fst, ex)], c.snd]
  | Seq (st1, st2) -> eval(eval(c, st1), st2)
  | Skip -> c
  | Read (v) -> case readWorld(c.snd) of
                    [vl, wd] -> [c.fst <- [v, vl], wd] -- [elem, world]
                  esac
  | Write (expr) -> [c.fst, writeWorld(evalExpr(c.fst, expr), c.snd)]
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
